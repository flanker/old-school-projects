#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3074
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace HappyTogether.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Together")]
	public partial class HappyTogetherDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTogether(Together instance);
    partial void UpdateTogether(Together instance);
    partial void DeleteTogether(Together instance);
    partial void InsertAttendee(Attendee instance);
    partial void UpdateAttendee(Attendee instance);
    partial void DeleteAttendee(Attendee instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    #endregion
		
		public HappyTogetherDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TogetherConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HappyTogetherDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HappyTogetherDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HappyTogetherDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HappyTogetherDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Together> Together
		{
			get
			{
				return this.GetTable<Together>();
			}
		}
		
		public System.Data.Linq.Table<Attendee> Attendee
		{
			get
			{
				return this.GetTable<Attendee>();
			}
		}
		
		public System.Data.Linq.Table<Post> Post
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		[Function(Name="dbo.NearestTogether", IsComposable=true)]
		public IQueryable<NearestTogether_个结果> NearestTogether([Parameter(DbType="Real")] System.Nullable<float> lat, [Parameter(Name="long", DbType="Real")] System.Nullable<float> @long)
		{
			return this.CreateMethodCallQuery<NearestTogether_个结果>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), lat, @long);
		}
		
		[Function(Name="dbo.DistanceBetween", IsComposable=true)]
		public System.Nullable<float> DistanceBetween([Parameter(Name="Lat1", DbType="Real")] System.Nullable<float> lat1, [Parameter(Name="Long1", DbType="Real")] System.Nullable<float> long1, [Parameter(Name="Lat2", DbType="Real")] System.Nullable<float> lat2, [Parameter(Name="Long2", DbType="Real")] System.Nullable<float> long2)
		{
			return ((System.Nullable<float>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), lat1, long1, lat2, long2).ReturnValue));
		}
	}
	
	[Table(Name="dbo.Together")]
	public partial class Together : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TogetherID;
		
		private string _Title;
		
		private string _HostedBy;
		
		private string _UserName;
		
		private string _TinyURL;
		
		private global::HappyTogether.Models.TogetherTypeEnum _TogetherType;
		
		private string _Address;
		
		private System.DateTime _StartDate;
		
		private string _Description;
		
		private global::HappyTogether.Models.FeeTypeEnum _FeeType;
		
		private string _Fee;
		
		private string _ContactPhone;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private string _PicURL;
		
		private EntitySet<Attendee> _Attendees;
		
		private EntitySet<Post> _Posts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTogetherIDChanging(int value);
    partial void OnTogetherIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnHostedByChanging(string value);
    partial void OnHostedByChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnTinyURLChanging(string value);
    partial void OnTinyURLChanged();
    partial void OnTogetherTypeChanging(global::HappyTogether.Models.TogetherTypeEnum value);
    partial void OnTogetherTypeChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFeeTypeChanging(global::HappyTogether.Models.FeeTypeEnum value);
    partial void OnFeeTypeChanged();
    partial void OnFeeChanging(string value);
    partial void OnFeeChanged();
    partial void OnContactPhoneChanging(string value);
    partial void OnContactPhoneChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnPicURLChanging(string value);
    partial void OnPicURLChanged();
    #endregion
		
		public Together()
		{
			this._Attendees = new EntitySet<Attendee>(new Action<Attendee>(this.attach_Attendees), new Action<Attendee>(this.detach_Attendees));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			OnCreated();
		}
		
		[Column(Storage="_TogetherID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TogetherID
		{
			get
			{
				return this._TogetherID;
			}
			set
			{
				if ((this._TogetherID != value))
				{
					this.OnTogetherIDChanging(value);
					this.SendPropertyChanging();
					this._TogetherID = value;
					this.SendPropertyChanged("TogetherID");
					this.OnTogetherIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_HostedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string HostedBy
		{
			get
			{
				return this._HostedBy;
			}
			set
			{
				if ((this._HostedBy != value))
				{
					this.OnHostedByChanging(value);
					this.SendPropertyChanging();
					this._HostedBy = value;
					this.SendPropertyChanged("HostedBy");
					this.OnHostedByChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_TinyURL", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string TinyURL
		{
			get
			{
				return this._TinyURL;
			}
			set
			{
				if ((this._TinyURL != value))
				{
					this.OnTinyURLChanging(value);
					this.SendPropertyChanging();
					this._TinyURL = value;
					this.SendPropertyChanged("TinyURL");
					this.OnTinyURLChanged();
				}
			}
		}
		
		[Column(Storage="_TogetherType", DbType="Int NOT NULL", CanBeNull=false)]
		public global::HappyTogether.Models.TogetherTypeEnum TogetherType
		{
			get
			{
				return this._TogetherType;
			}
			set
			{
				if ((this._TogetherType != value))
				{
					this.OnTogetherTypeChanging(value);
					this.SendPropertyChanging();
					this._TogetherType = value;
					this.SendPropertyChanged("TogetherType");
					this.OnTogetherTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_FeeType", DbType="Int NOT NULL", CanBeNull=false)]
		public global::HappyTogether.Models.FeeTypeEnum FeeType
		{
			get
			{
				return this._FeeType;
			}
			set
			{
				if ((this._FeeType != value))
				{
					this.OnFeeTypeChanging(value);
					this.SendPropertyChanging();
					this._FeeType = value;
					this.SendPropertyChanged("FeeType");
					this.OnFeeTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Fee", DbType="NVarChar(100)")]
		public string Fee
		{
			get
			{
				return this._Fee;
			}
			set
			{
				if ((this._Fee != value))
				{
					this.OnFeeChanging(value);
					this.SendPropertyChanging();
					this._Fee = value;
					this.SendPropertyChanged("Fee");
					this.OnFeeChanged();
				}
			}
		}
		
		[Column(Storage="_ContactPhone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactPhone
		{
			get
			{
				return this._ContactPhone;
			}
			set
			{
				if ((this._ContactPhone != value))
				{
					this.OnContactPhoneChanging(value);
					this.SendPropertyChanging();
					this._ContactPhone = value;
					this.SendPropertyChanged("ContactPhone");
					this.OnContactPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[Column(Storage="_PicURL", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string PicURL
		{
			get
			{
				return this._PicURL;
			}
			set
			{
				if ((this._PicURL != value))
				{
					this.OnPicURLChanging(value);
					this.SendPropertyChanging();
					this._PicURL = value;
					this.SendPropertyChanged("PicURL");
					this.OnPicURLChanged();
				}
			}
		}
		
		[Association(Name="Together_Attendee", Storage="_Attendees", ThisKey="TogetherID", OtherKey="TogetherID")]
		public EntitySet<Attendee> Attendees
		{
			get
			{
				return this._Attendees;
			}
			set
			{
				this._Attendees.Assign(value);
			}
		}
		
		[Association(Name="Together_Post", Storage="_Posts", ThisKey="TogetherID", OtherKey="TogetherID")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attendees(Attendee entity)
		{
			this.SendPropertyChanging();
			entity.Together = this;
		}
		
		private void detach_Attendees(Attendee entity)
		{
			this.SendPropertyChanging();
			entity.Together = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Together = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.Together = null;
		}
	}
	
	[Table(Name="dbo.Attendee")]
	public partial class Attendee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AttendeeID;
		
		private int _TogetherID;
		
		private string _AttendeeBy;
		
		private string _UserName;
		
		private string _TinyURL;
		
		private EntityRef<Together> _Together;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttendeeIDChanging(long value);
    partial void OnAttendeeIDChanged();
    partial void OnTogetherIDChanging(int value);
    partial void OnTogetherIDChanged();
    partial void OnAttendeeByChanging(string value);
    partial void OnAttendeeByChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnTinyURLChanging(string value);
    partial void OnTinyURLChanged();
    #endregion
		
		public Attendee()
		{
			this._Together = default(EntityRef<Together>);
			OnCreated();
		}
		
		[Column(Storage="_AttendeeID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AttendeeID
		{
			get
			{
				return this._AttendeeID;
			}
			set
			{
				if ((this._AttendeeID != value))
				{
					this.OnAttendeeIDChanging(value);
					this.SendPropertyChanging();
					this._AttendeeID = value;
					this.SendPropertyChanged("AttendeeID");
					this.OnAttendeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_TogetherID", DbType="Int NOT NULL")]
		public int TogetherID
		{
			get
			{
				return this._TogetherID;
			}
			set
			{
				if ((this._TogetherID != value))
				{
					if (this._Together.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTogetherIDChanging(value);
					this.SendPropertyChanging();
					this._TogetherID = value;
					this.SendPropertyChanged("TogetherID");
					this.OnTogetherIDChanged();
				}
			}
		}
		
		[Column(Storage="_AttendeeBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AttendeeBy
		{
			get
			{
				return this._AttendeeBy;
			}
			set
			{
				if ((this._AttendeeBy != value))
				{
					this.OnAttendeeByChanging(value);
					this.SendPropertyChanging();
					this._AttendeeBy = value;
					this.SendPropertyChanged("AttendeeBy");
					this.OnAttendeeByChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_TinyURL", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string TinyURL
		{
			get
			{
				return this._TinyURL;
			}
			set
			{
				if ((this._TinyURL != value))
				{
					this.OnTinyURLChanging(value);
					this.SendPropertyChanging();
					this._TinyURL = value;
					this.SendPropertyChanged("TinyURL");
					this.OnTinyURLChanged();
				}
			}
		}
		
		[Association(Name="Together_Attendee", Storage="_Together", ThisKey="TogetherID", OtherKey="TogetherID", IsForeignKey=true)]
		public Together Together
		{
			get
			{
				return this._Together.Entity;
			}
			set
			{
				Together previousValue = this._Together.Entity;
				if (((previousValue != value) 
							|| (this._Together.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Together.Entity = null;
						previousValue.Attendees.Remove(this);
					}
					this._Together.Entity = value;
					if ((value != null))
					{
						value.Attendees.Add(this);
						this._TogetherID = value.TogetherID;
					}
					else
					{
						this._TogetherID = default(int);
					}
					this.SendPropertyChanged("Together");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Post")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PostID;
		
		private string _PostBy;
		
		private System.DateTime _PostDate;
		
		private string _UserName;
		
		private string _TinyURL;
		
		private string _PostContent;
		
		private int _TogetherID;
		
		private EntityRef<Together> _Together;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostIDChanging(long value);
    partial void OnPostIDChanged();
    partial void OnPostByChanging(string value);
    partial void OnPostByChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnTinyURLChanging(string value);
    partial void OnTinyURLChanged();
    partial void OnPostContentChanging(string value);
    partial void OnPostContentChanged();
    partial void OnTogetherIDChanging(int value);
    partial void OnTogetherIDChanged();
    #endregion
		
		public Post()
		{
			this._Together = default(EntityRef<Together>);
			OnCreated();
		}
		
		[Column(Storage="_PostID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PostID
		{
			get
			{
				return this._PostID;
			}
			set
			{
				if ((this._PostID != value))
				{
					this.OnPostIDChanging(value);
					this.SendPropertyChanging();
					this._PostID = value;
					this.SendPropertyChanged("PostID");
					this.OnPostIDChanged();
				}
			}
		}
		
		[Column(Storage="_PostBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PostBy
		{
			get
			{
				return this._PostBy;
			}
			set
			{
				if ((this._PostBy != value))
				{
					this.OnPostByChanging(value);
					this.SendPropertyChanging();
					this._PostBy = value;
					this.SendPropertyChanged("PostBy");
					this.OnPostByChanged();
				}
			}
		}
		
		[Column(Storage="_PostDate", DbType="DateTime NOT NULL")]
		public System.DateTime PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_TinyURL", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string TinyURL
		{
			get
			{
				return this._TinyURL;
			}
			set
			{
				if ((this._TinyURL != value))
				{
					this.OnTinyURLChanging(value);
					this.SendPropertyChanging();
					this._TinyURL = value;
					this.SendPropertyChanged("TinyURL");
					this.OnTinyURLChanged();
				}
			}
		}
		
		[Column(Storage="_PostContent", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string PostContent
		{
			get
			{
				return this._PostContent;
			}
			set
			{
				if ((this._PostContent != value))
				{
					this.OnPostContentChanging(value);
					this.SendPropertyChanging();
					this._PostContent = value;
					this.SendPropertyChanged("PostContent");
					this.OnPostContentChanged();
				}
			}
		}
		
		[Column(Storage="_TogetherID", DbType="Int NOT NULL")]
		public int TogetherID
		{
			get
			{
				return this._TogetherID;
			}
			set
			{
				if ((this._TogetherID != value))
				{
					if (this._Together.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTogetherIDChanging(value);
					this.SendPropertyChanging();
					this._TogetherID = value;
					this.SendPropertyChanged("TogetherID");
					this.OnTogetherIDChanged();
				}
			}
		}
		
		[Association(Name="Together_Post", Storage="_Together", ThisKey="TogetherID", OtherKey="TogetherID", IsForeignKey=true)]
		public Together Together
		{
			get
			{
				return this._Together.Entity;
			}
			set
			{
				Together previousValue = this._Together.Entity;
				if (((previousValue != value) 
							|| (this._Together.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Together.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._Together.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._TogetherID = value.TogetherID;
					}
					else
					{
						this._TogetherID = default(int);
					}
					this.SendPropertyChanged("Together");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class NearestTogether_个结果
	{
		
		private int _TogetherID;
		
		public NearestTogether_个结果()
		{
		}
		
		[Column(Storage="_TogetherID", DbType="Int NOT NULL")]
		public int TogetherID
		{
			get
			{
				return this._TogetherID;
			}
			set
			{
				if ((this._TogetherID != value))
				{
					this._TogetherID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
